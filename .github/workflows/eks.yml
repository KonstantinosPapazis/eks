name: Deploy EKS Cluster

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Restore Terraform state from cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            .terraform
            terraform.tfstate
          key: terraform-state-${{ github.ref }}

      - name: Initialize Terraform
        run: terraform init

      - name: Plan Terraform
        run: terraform plan

      - name: Apply Terraform
        run: terraform apply -auto-approve

      - name: Cache updated Terraform state
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: |
            .terraform
            terraform.tfstate
          key: terraform-state-${{ github.ref }}

      - name: Retrieve kubeconfig file path
        id: kubeconfig_path
        run: echo "kubeconfig_path=${GITHUB_WORKSPACE}/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Upload kubeconfig.yaml as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: ${{ env.kubeconfig_path }}

      - name: Encode kubeconfig as base64
        run: echo "KUBECONFIG_CONTENT=$(base64 -w 0 kubeconfig.yaml)" >> $GITHUB_ENV

#      - name: Save kubeconfig as secret
#        uses: actions/github-script@v6
#        with:
#          script: |
#            github.actions.createOrUpdateSecretForRepo({
#              owner: 'KonstantinosPapazis',
#              repo: 'deployments',
#              secret_name: 'KUBECONFIG_BASE64',
#              secret_value: process.env.KUBECONFIG_CONTENT,
#            })
#          secrets: PAT_FOR_SECRET_MANAGEMENT

      - name: Save kubeconfig as secret
        run: |
          # Install dependencies
          npm install @octokit/rest tweetsodium

          # Execute the script
          node -e "
            const { Octokit } = require('@octokit/rest');
            const sodium = require('tweetsodium');

            const octokit = new Octokit({ auth: process.env.PAT_FOR_SECRET_MANAGEMENT });
            const owner = 'KonstantinosPapazis';
            const repo = 'deployments';
            const secretName = 'KUBECONFIG_BASE64';
            const secretValue = process.env.KUBECONFIG_CONTENT;

            (async () => {
              // Get the public key
              const publicKeyResponse = await octokit.actions.getRepoPublicKey({ owner, repo });
              const publicKey = publicKeyResponse.data.key;
              const publicKeyId = publicKeyResponse.data.key_id;

              // Encrypt the secret
              const messageBytes = Buffer.from(secretValue);
              const keyBytes = Buffer.from(publicKey, 'base64');
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              const encryptedValue = Buffer.from(encryptedBytes).toString('base64');

              // Create or update the secret
              await octokit.actions.createOrUpdateRepoSecret({
                owner,
                repo,
                secret_name: secretName,
                encrypted_value: encryptedValue,
                key_id: publicKeyId,
              });
            })();
          "
        env:
          PAT_FOR_SECRET_MANAGEMENT: ${{ secrets.PAT_FOR_SECRET_MANAGEMENT }}
          KUBECONFIG_CONTENT: ${{ env.KUBECONFIG_CONTENT }}
